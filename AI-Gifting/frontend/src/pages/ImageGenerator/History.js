import React, { useEffect, useState } from 'react';
import Loader from '../../component/Loader/Loader';
import './history.css';

const RenderCards = ({ data, title, handleImageClick }) => {
  if (data?.length > 0) {
    return (
      <div className="card-container">
        {data.map((post) => (
          <div key={post._id} className="card">
            <img src={post.image} alt={post.prompt} onClick={() => handleImageClick(post.image)} />
            <div className="card-body">
              <h5 className="card-title">{post.prompt}</h5>
            </div>
            <div className="Card__item-save">
              <button
                className="download-img"
                onClick={() => downloadImage(post.image, `${post.prompt}.jpg`)}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                  <path fill="black" d="M6.747 4h3.464a.75.75 0 0 1 .102 1.493l-.102.007H6.747a2.25 2.25 0 0 0-2.245 2.095l-.005.155v9.5a2.25 2.25 0 0 0 2.096 2.244l.154.006h9.5a2.25 2.25 0 0 0 2.246-2.096l.005-.154v-.498a.75.75 0 0 1 1.493-.102l.007.102v.498a3.75 3.75 0 0 1-3.551 3.744l-.2.006h-9.5a3.75 3.75 0 0 1-3.745-3.551l-.005-.2v-9.5a3.75 3.75 0 0 1 3.55-3.744zh3.464zm7.754 2.544V3.75a.75.75 0 0 1 1.187-.61l.082.068l5.995 5.75c.28.269.305.7.076.998l-.076.085l-5.995 5.752a.75.75 0 0 1-1.262-.435l-.007-.107V12.45l-.32-.007c-2.658-.008-4.93 1.084-6.866 3.302c-.495.567-1.425.131-1.305-.613c.827-5.14 3.599-8.044 8.19-8.558zV3.75z"/>
                </svg>

              </button>
            </div>

          </div>
        ))}
      </div>
    );
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

const History = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedImage, setSelectedImage] = useState('');

  const fetchPosts = async () => {
    setLoading(true);
    try {
      const response = await fetch('http://localhost:8000/api/v1/artwork_post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  const handleImageClick = (image) => {
    setSelectedImage(image);
    setModalOpen(true);
  };

  const closeModal = () => {
    setModalOpen(false);
  };

  const copyLinkToClipboard = () => {
    // Logic to copy the link to the clipboard
    // You can use document.execCommand('copy') or navigator.clipboard.writeText() APIs
  };

  return (
    <section>
      <div>
        <h1>The Community Showcase</h1>
        <p>Browse through a collection of imaginative and visually stunning images generated by DALL-E AI</p>
      </div>

      <div>
        <input
          label="Search posts"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          onChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2>
                Showing Results for <span>{searchText}</span>:
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards data={searchedResults} title="No Search Results Found" handleImageClick={handleImageClick} />
              ) : (
                <RenderCards data={allPosts} title="No Posts Yet" handleImageClick={handleImageClick} />
              )}
            </div>
          </>
        )}
      </div>

      {modalOpen && (
        <div className="modal">
          <div className="modal-content">
            <span className="close" onClick={closeModal}>
              &times;
            </span>
            <img src={selectedImage} alt="Selected" />
            <div>
              <input type="text" value={selectedImage} readOnly />
              <button onClick={copyLinkToClipboard}>Copy Link</button>
            </div>
          </div>
        </div>
      )}
    </section>
  );
};

export default History;
