import React, { useEffect, useState } from 'react';
//import card from '../../component/card';
import Loader from '../../component/Loader/Loader';


const styles = {
  container: {
    maxWidth: '7xl',
    margin: '0 auto',
  },
  heading: {
    fontWeight: 'extrabold',
    color: '#fdfdfd',
    fontSize: '32px',
  },
  description: {
    marginTop: '2px',
    color: '#fdfdfd',
    fontSize: '14px',
  
  },
  searchField: {
    marginTop: '16px',
    Width:'80px',
  },
  searchResults: {
    fontWeight: 'medium',
    color: '#666e75',
    fontSize: '20px',
    marginBottom: '3px',
  },
  noResults: {
    color: '#222328',
  },
};

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

const History = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);

  const [searchText, setSearchText] = useState('');
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch('http://localhost:8000/api/v1/artwork_post', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  return (
    <section style={styles.container}>
      <div>
        <h1 style={styles.heading}>The Community Showcase</h1>
        <p style={styles.description}>
          Browse through a collection of imaginative and visually stunning images generated by DALL-E AI
        </p>
      </div>

      <div style={styles.searchField}>
        <input
          label="Search posts"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          onChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 style={styles.searchResults}>
                Showing Results for <span style={styles.noResults}>{searchText}</span>:
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards data={searchedResults} title="No Search Results Found" />
              ) : (
                <RenderCards data={allPosts} title="No Posts Yet" />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default History;
